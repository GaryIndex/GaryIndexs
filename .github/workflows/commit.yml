name: Unzip and Commit Changes

on:
  push:
    paths:
      - '*.zip'
      - '*.tar.gz'
      - '*.tar.bz2'
      - '*.tar.xz'
      - '*.rar'
      - '*.7z'

jobs:
  unzip:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      NEED_EXTRACTION: "true"            # 是否需要解压文件
      USE_ZIP_NAME_AS_DIRECTORY: "false" # 是否使用 ZIP 名称作为目录
      DELETE_AFTER_EXTRACTION: "true"    # 解压后是否删除压缩包

    steps:
      # 检出代码库
      - name: Checkout repository
        uses: actions/checkout@v2

      # 安装必要的解压工具
      - name: Install necessary tools
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip p7zip-full p7zip-rar rar tar

      # 调试环境变量和当前目录状态
      - name: Debugging environment
        run: |
          echo "NEED_EXTRACTION=$NEED_EXTRACTION"
          echo "USE_ZIP_NAME_AS_DIRECTORY=$USE_ZIP_NAME_AS_DIRECTORY"
          echo "DELETE_AFTER_EXTRACTION=$DELETE_AFTER_EXTRACTION"
          echo "Current directory structure:"
          ls -al

      # 判断是否需要解压
      - name: Check if extraction is needed
        if: env.NEED_EXTRACTION == 'true'
        run: |
          echo "Starting extraction process..."
          
          # 查找根目录下的压缩文件
          files=$(find . -maxdepth 1 -type f \( -name '*.zip' -o -name '*.tar.gz' -o -name '*.tar.bz2' -o -name '*.tar.xz' -o -name '*.rar' -o -name '*.7z' \))
          echo "Found files: $files"
          
          for file in $files; do
            echo "Processing $file"
            
            if [ "$USE_ZIP_NAME_AS_DIRECTORY" = "true" ]; then
              echo "Using ZIP name as directory"
              dir_name="${file%.*}"
              mkdir -p "$dir_name"
              # 解压到指定目录
              case "$file" in
                *.zip) unzip -o "$file" -d "$dir_name" || { echo "Error extracting $file"; exit 1; } ;;
                *.tar.gz) tar -xzf "$file" -C "$dir_name" || { echo "Error extracting $file"; exit 1; } ;;
                *.tar.bz2) tar -xjf "$file" -C "$dir_name" || { echo "Error extracting $file"; exit 1; } ;;
                *.tar.xz) tar -xJf "$file" -C "$dir_name" || { echo "Error extracting $file"; exit 1; } ;;
                *.rar) unrar x -o+ "$file" "$dir_name/" || { echo "Error extracting $file"; exit 1; } ;;
                *.7z) 7z x "$file" -o"$dir_name" || { echo "Error extracting $file"; exit 1; } ;;
                *) echo "Unsupported file type: $file" ;;
              esac
            else
              echo "Extracting directly into the current directory"
              # 解压到当前目录
              case "$file" in
                *.zip) unzip -j "$file" -d . || { echo "Error extracting $file"; exit 1; } ;;  # 解压时不保留路径结构
                *.tar.gz) tar -xzf "$file" --strip-components=1 -C . || { echo "Error extracting $file"; exit 1; } ;;  # 解压时去掉最外层目录
                *.tar.bz2) tar -xjf "$file" --strip-components=1 -C . || { echo "Error extracting $file"; exit 1; } ;;
                *.tar.xz) tar -xJf "$file" --strip-components=1 -C . || { echo "Error extracting $file"; exit 1; } ;;
                *.rar) unrar x -o+ "$file" . || { echo "Error extracting $file"; exit 1; } ;;  # 默认情况下 unrar 不保留路径
                *.7z) 7z x "$file" -o"." || { echo "Error extracting $file"; exit 1; } ;;  # 默认情况下 7z 不保留路径
                *) echo "Unsupported file type: $file" ;;
              esac
            fi

            # 判断是否删除压缩包
            if [ "$DELETE_AFTER_EXTRACTION" = "true" ]; then
              echo "Deleting $file"
              rm "$file"
            else
              echo "Keeping $file"
            fi
          done

      # 如果不需要解压，只输出调试信息
      - name: Skip extraction
        if: env.NEED_EXTRACTION != 'true'
        run: |
          echo "Extraction is disabled. Skipping."
          echo "Current directory structure:"
          ls -al

      # 提交解压后的更改
      - name: Commit and push changes
        if: env.NEED_EXTRACTION == 'true'
        run: |
          echo "Preparing to commit changes..."

          # 配置 Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 拉取远程分支的最新更新
          git pull --rebase origin main || echo "No remote changes to pull"
          
          # 添加和提交更改
          git add .
          git diff --cached --quiet || git commit -m "Unzipped files"
          
          # 推送更改
          git push