name: Unzip and Commit Changes

on:
  push:
    paths:
      - '*.zip'
      - '*.tar.gz'
      - '*.tar.bz2'
      - '*.tar.xz'
      - '*.rar'
      - '*.7z'

jobs:
  unzip:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      NEED_EXTRACTION: "true"            # 是否需要解压文件
      USE_ZIP_NAME_AS_DIRECTORY: "false" # 是否使用 ZIP 名称作为根目录
      DELETE_AFTER_EXTRACTION: "true"    # 解压后是否删除压缩包
      OPTIMIZE_IOS_METADATA: "true"      # 是否优化 iOS 元数据

    steps:
      # 检出代码库
      - name: Checkout repository
        uses: actions/checkout@v2

      # 安装必要的解压工具
      - name: Install necessary tools
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip p7zip-full p7zip-rar rar tar

      # 调试环境变量和当前目录状态
      - name: Debugging environment
        run: |
          echo "NEED_EXTRACTION=$NEED_EXTRACTION"
          echo "USE_ZIP_NAME_AS_DIRECTORY=$USE_ZIP_NAME_AS_DIRECTORY"
          echo "DELETE_AFTER_EXTRACTION=$DELETE_AFTER_EXTRACTION"
          echo "OPTIMIZE_IOS_METADATA=$OPTIMIZE_IOS_METADATA"
          echo "Current directory structure:"
          ls -al

      # 判断是否需要解压
      - name: Check if extraction is needed
        if: env.NEED_EXTRACTION == 'true'
        run: |
          # 查找根目录下的压缩文件
          for file in $(find . -maxdepth 1 -type f \( -name '*.zip' -o -name '*.tar.gz' -o -name '*.tar.bz2' -o -name '*.tar.xz' -o -name '*.rar' -o -name '*.7z' \)); do
            echo "Processing $file"

            # 获取压缩包的基础名称（去掉路径和后缀）
            base_name=$(basename "$file" .zip)

            # 判断是否使用 ZIP 名称作为根目录
            if [ "$USE_ZIP_NAME_AS_DIRECTORY" = "true" ]; then
              echo "Using ZIP name as root directory: $base_name"
              mkdir -p "$base_name"
              if unzip "$file" -d "$base_name"; then
                echo "Successfully extracted $file to $base_name/"
              else
                echo "Error extracting $file"
                exit 1
              fi
            else
              echo "Extracting directly into the current directory"
              if unzip "$file" -d .; then
                echo "Successfully extracted $file"
              else
                echo "Error extracting $file"
                exit 1
              fi
            fi

            # 判断是否删除压缩包
            if [ "$DELETE_AFTER_EXTRACTION" = "true" ]; then
              echo "Deleting $file"
              rm "$file"
            else
              echo "Keeping $file"
            fi

            # 判断是否优化 iOS 元数据
            if [ "$OPTIMIZE_IOS_METADATA" = "true" ]; then
              echo "Optimizing iOS metadata..."
              # 删除 __MACOSX 文件夹
              if [ -d "$base_name/__MACOSX" ]; then
                echo "Removing __MACOSX folder"
                rm -rf "$base_name/__MACOSX"
              fi
              # 删除 .DS_Store 文件
              find "$base_name" -name ".DS_Store" -type f -exec rm -f {} +
            fi
          done

      # 如果不需要解压，只输出调试信息
      - name: Skip extraction
        if: env.NEED_EXTRACTION != 'true'
        run: |
          echo "Extraction is disabled. Skipping."
          echo "Current directory structure:"
          ls -al

      # 提交解压后的更改
      - name: Commit and push changes
        if: env.NEED_EXTRACTION == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git diff --cached --quiet || git commit -m "Unzipped files"
          git push